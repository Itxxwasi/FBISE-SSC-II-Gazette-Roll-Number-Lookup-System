
"""
main.py
--------
Flask app to look up FBISE SSC-II Gazette results by Roll Number.
Loads data from CSV generated by parse_gazette.py (streaming).
"""

from flask import Flask, render_template, request
import pandas as pd
from pathlib import Path

app = Flask(__name__)

DATA_FILE = Path(__file__).parent / "data" / "results.csv"

# Load data into memory on startup
if not DATA_FILE.exists():
    raise FileNotFoundError(
        f"{DATA_FILE} not found. Run `python parse_gazette.py` first to generate it."
    )

df = pd.read_csv(DATA_FILE, dtype={"RollNo": str})

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/result")
def result():
    roll = (request.args.get("roll") or "").strip()
    if not roll.isdigit() or len(roll) != 7:
        return render_template("not_found.html", roll=roll), 404

    match = df[df["RollNo"] == roll]
    if match.empty:
        return render_template("not_found.html", roll=roll), 404

    row = match.iloc[0]
    payload = {
        "RollNo": row["RollNo"],
        "Name": row["Name"],
        "Status": row["Status"],
        "Marks": int(row["Marks"]) if not pd.isna(row["Marks"]) else None,
        "Grade": row["Grade"],
        "SchoolName": row["SchoolName"],
        "SchoolCode": row["SchoolCode"],
    }
    return render_template("result.html", row=payload)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)






# """
# main.py
# ----------
# Single-file Flask launcher that serves a Roll Number lookup UI for the
# FBISE SSC-II 1st Annual 2025 Gazette.

# On startup we load (or build) a cached table using parse_gazette.build_cache().
# Users enter a 7-digit Roll No and see Name, Status, Marks, Grade, Schoolâ€”
# the full dataset stays hidden.
# """

# from flask import Flask, render_template, request
# import pandas as pd
# from parse_gazette import build_cache

# app = Flask(__name__)

# # Build/load cache once at startup
# df = build_cache(force=False)

# @app.route("/")
# def index():
#     return render_template("index.html")

# @app.route("/result")
# def result():
#     roll = (request.args.get("roll") or "").strip()
#     if not roll.isdigit() or len(roll) != 7:
#         return render_template("not_found.html", roll=roll), 404

#     match = df[df["RollNo"] == roll]
#     if match.empty:
#         return render_template("not_found.html", roll=roll), 404

#     row = match.iloc[0]
#     marks = None if pd.isna(row["Marks"]) else int(row["Marks"])
#     payload = {
#         "RollNo": row["RollNo"],
#         "Name": row["Name"],
#         "Status": row["Status"],
#         "Marks": marks,
#         "Grade": row["Grade"],
#         "SchoolName": row["SchoolName"],
#         "SchoolCode": row["SchoolCode"],
#     }
#     return render_template("result.html", row=payload)

# if __name__ == "__main__":
#     # Replit will expose this on a public URL
#     app.run(host="0.0.0.0", port=8000, debug=True)
